#!/usr/bin/bash
shopt -s extglob

# Table Operations Menu
while true; do
	select=$(zenity --list --title="Table Operations" --radiolist \
	--column="Select" --column="Operations" \
	TRUE "Create Table" \
	FALSE "List Tables" \
	FALSE "Drop Table" \
	FALSE "Insert into Table" \
	FALSE "Select From Table" \
	FALSE "Delete From Table" \
	FALSE "Update Table" \
	--cancel-label="Back to Main Menu" --width=700 --height=500)
	
	# Capture the exit code of Zenity
	zenity_exit_code=$?
	if [[ $zenity_exit_code == "0" ]] #if user select a database and press on 'ok' button
	then
		case $select in
		"Create Table") # create table
			chooseTBName=1  #make a flag to check if the user has choose a table name
			while true
			do 
				TBName=$(zenity --entry --text="Please enter table name:")
				if [[ $? == "1" ]] # In case user change his mind or select the wrong option
				then 
					chooseTBName=0
					break
				fi
				if [[ ! $TBName =~ ^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$ ]]
				then
					zenity --error --text="Invalid table name. Must start with a letter, can contain underscores, and cannot end with an underscore."

				elif [[ -f $TBName || -f .$TBName-metadata ]]
				then
					zenity --error --text="Table '$TBName' already exists."
				else 
					break
				fi
			done
			
			choosencolNum=1
			while [[ $chooseTBName == "1" ]]  #will work if the user set an accepted name for the table
			do
				colNum=$(zenity --entry --text="Please enter the number of columns:")
				
				if [[ $? == "1" ]] # In case user change his mind or select the wrong option
				then 
					choosencolNum=0
					break
				fi
				
				if [[ $colNum =~ ^0$ || ! $colNum =~ ^[0]*[1-9][0-9]*$ ]]
				then
					zenity --error --text="Invalid column count. Enter only positive integers and cannot be zero alone."
				else
					break
				fi
			done

			# create metadata hidden file if user specifie colnum
			if [[ $choosencolNum == "1" ]]
			then 
				flag=0
				for ((i = 1; i <= colNum; i++)); do
					while true
					do
						colName=$(zenity --entry --text="Enter column name $i:")
						if [[ ! $colName =~ ^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$ ]]
						then
							zenity --error --text="Invalid column name. Must start with a letter, can contain underscores, and cannot end with an underscore."
							
						else
							break
						fi
					done
					
					while true
					do
						colType=$(zenity --list --title="Data type for '$colName':"\
						--radiolist --column="Select" --column="Datatypes" \
					 	TRUE "string" \
						FALSE "int" )
						if [[ $? == "1" ]]
						then 
							zenity --error --text="You have to select a datatype."
						else
							break
						fi
					done
					
					if [[ $flag -eq 0 ]]
					then
						pkCheck=$(zenity --question --text="Make '$colName' the primary key?" --title="Primary Key")
						if [[ $? == "0" ]]
						then
							echo "$colName:$colType:pk" >>.$TBName-metadata
							zenity --info --text="Column '$colName' becomes primary key of table '$TBName'"
							flag=1
						else
							echo "$colName:$colType" >>.$TBName-metadata
						fi
					else
						echo "$colName:$colType" >>.$TBName-metadata
					fi
				done
			fi
			if [[ $chooseTBName == "1" && $choosencolNum == "1" ]]
			then
				touch "$TBName"
				zenity --info --text="Table '$TBName' created successfully."
			fi
		;;

		"List Tables") # List Tables
			tables=$(ls -1 | grep -v "^\.")
			if [[ -z $tables ]]; then
				zenity --info --text="No tables found."
			else
				zenity --info --text="Available tables:\n$tables"
			fi
			;;

		"Drop Table") # Drop Table
			tables=$(ls -1 | grep -v "^\.")
			if [[ -z $tables ]]; then
				zenity --info --text="No tables found."
			else
				# Get files into an array (excludes hidden files)
				mapfile -t tables_array < <(find . -maxdepth 1 -type f -printf '%f\n' | grep -v "^\.")
				# Build Zenity arguments with radio buttons (mark the first item as selected)
				array_length=${#tables_array[@]}
				zenity_args=()
				for ((index=0; index < array_length; index++))
				do
					if [[ $index -eq 0 ]]; then
						zenity_args+=(TRUE "${tables_array[index]}")  # First item selected by default
					else
						zenity_args+=(FALSE "${tables_array[index]}")  # Others unselected
					fi
				done

				# Show the radio button dialog
				TBName=$(zenity --list --title="Drop table" --radiolist \
				  --text="Choose a table:" \
				  --column="Select" \
				  --column="Table Name" \
				  --cancel-label="Back to Table Operation Menu" \
				  "${zenity_args[@]}")
				  
				zenity_exit_code=$?
				if [[ $zenity_exit_code == "0" ]]; then
						zenity --question --title="Drop Confirmation" --text="Are you sure you want to permanently delete the table '$TBName'? This action cannot be undone."
						user_answer=$?
						if [[ $user_answer == "0" ]]; then
							rm -f "$TBName" ".$TBName-metadata"
							zenity --notification --text="Table '$TBName' has been dropped successfully."
						fi
				fi
			fi
		;;

		"Insert into Table") # Insert into Table
		    tables=$(ls -1 | grep -v "^\.")
		    if [[ -z $tables ]]; then
			zenity --info --text="No tables found."
		    else
			# Get files into an array (excludes hidden files)
			mapfile -t tables_array < <(find . -maxdepth 1 -type f -printf '%f\n' | grep -v "^\.")
			# Build Zenity arguments with radio buttons (mark the first item as selected)
			array_length=${#tables_array[@]}
			zenity_args=()
			for ((index=0; index < array_length; index++))
			do
			    if [[ $index -eq 0 ]]; then
				zenity_args+=(TRUE "${tables_array[index]}")  # First item selected by default
			    else
				zenity_args+=(FALSE "${tables_array[index]}")  # Others unselected
			    fi
			done

			# Show the radio button dialog
			TBName=$(zenity --list --title="Insert into Table" --radiolist \
			  --text="Choose a table:" \
			  --column="Select" \
			  --column="Table Name" \
			  --cancel-label="Back to Table Operation Menu" \
			  "${zenity_args[@]}")

			zenity_exit_code=$?
			if [[ $zenity_exit_code == "0" ]]; then
			    if [[ ! -f .$TBName-metadata ]]; then
				zenity --error --text="Metadata file for table '$TBName' not found."
				continue
			    fi

			    columns=() # store data inside meta in variable
			    while IFS=":" read -r colName colType colAttr; do
				columns+=("$colName:$colType:$colAttr")
			    done < .$TBName-metadata

			    row=()
			    for col in "${columns[@]}"; do
				IFS=":" read -r colName colType colAttr <<< "$col"
				while true; do
				    value=$(zenity --entry --title="Insert into Table" --text="Enter value for '$colName' ($colType):")
				    if [[ $? != 0 ]]; then
				        break 2  # If the user cancels the input, exit the loop.
				    fi

				    if [[ $colType == "int" && ! $value =~ ^[+-]?[0-9]+$ ]]; then
				        zenity --error --text="Invalid value for '$colName'. Expected an integer."
				        continue
				    elif [[ $colType == "string" && -z $value ]]; then
				        zenity --error --text="Invalid value for '$colName'. String cannot be empty."
				        continue
				    fi

				    if [[ $colAttr == "pk" ]]; then
				        if grep -q -w "$value" "$TBName"; then
				            zenity --error --text="Primary key '$value' for column '$colName' already exists."
				            continue
				        fi
				    fi

				    row+=("$value")
				    break
				done
			    done

			    if [[ ${#row[@]} -eq ${#columns[@]} ]]; then
				echo "${row[*]}" | tr ' ' ':' >> "$TBName"
				zenity --info --text="Row inserted into table '$TBName' successfully."
			    else
				zenity --error --text="Row insertion failed. Please ensure all columns are filled."
			    fi
			fi
		    fi
		    ;;

		"Select From Table") # Select From Table
		    tables=$(ls -1 | grep -v "^\.")
		    if [[ -z $tables ]]; then
			zenity --info --text="No tables found."
		    else
			# Get files into an array (excludes hidden files)
			mapfile -t tables_array < <(find . -maxdepth 1 -type f -printf '%f\n' | grep -v "^\.")
			# Build Zenity arguments with radio buttons (mark the first item as selected)
			array_length=${#tables_array[@]}
			zenity_args=()
			for ((index=0; index < array_length; index++))
			do
			    if [[ $index -eq 0 ]]; then
				zenity_args+=(TRUE "${tables_array[index]}")  # First item selected by default
			    else
				zenity_args+=(FALSE "${tables_array[index]}")  # Others unselected
			    fi
			done

			# Show the radio button dialog
			TBName=$(zenity --list --title="Insert into Table" --radiolist \
			  --text="Choose a table:" \
			  --column="Select" \
			  --column="Table Name" \
			  --cancel-label="Back to Table Operation Menu" \
			  "${zenity_args[@]}")

			zenity_exit_code=$?
			if [[ $zenity_exit_code == "0" ]]; then
			    if [[ ! -f .$TBName-metadata ]]; then
				zenity --error --text="Metadata file for table '$TBName' not found."
				continue
			    fi

			    # Extract column names from metadata
			    columns=()
			    while IFS=":" read -r colName colType colAttr; do
				columns+=("$colName")
			    done < .$TBName-metadata

			    # Build Zenity arguments for filtering
			    filter_col=$(zenity --list --title="Filter by Column" --radiolist \
				--text="Choose a column to filter:" \
				--column="Select" \
				--column="Column Name" \
				--cancel-label="Show All" \
				TRUE "${columns[0]}" \
				$(for col in "${columns[@]:1}"; do echo "FALSE $col"; done))

			    zenity_exit_code=$?
			    if [[ $zenity_exit_code == "0" ]]; then
				# Get filter value
				filter_value=$(zenity --entry --title="Filter Value" --text="Enter filter value for column '$filter_col':")

				if [[ $? != 0 ]]; then
				    continue
				fi

				# Validate filter value
				colType=$(grep -w "$filter_col" .$TBName-metadata | cut -d: -f2)
				if [[ $colType == "int" && ! $filter_value =~ ^[+-]?[0-9]+$ ]]; then
				    zenity --error --text="Invalid filter value. Expected an integer."
				    continue
				elif [[ $colType == "string" && -z $filter_value ]]; then
				    zenity --error --text="Invalid filter value. String cannot be empty."
				    continue
				fi

				# Fetch filtered rows
				filtered_rows=$(awk -F: -v col="$filter_col" -v val="$filter_value" '
				    BEGIN {IGNORECASE = 1;}
				    {
				        for (i = 1; i <= NF; i++) {
				            if ($i == val) {
				                print $0;
				                break;
				            }
				        }
				    }
				' "$TBName")

				if [[ -z $filtered_rows ]]; then
				    zenity --info --text="No matching records found."
				else
				    zenity --info --text="Matching records:\n$filtered_rows"
				fi
			    else
				# Show all rows if no filter
				all_rows=$(cat "$TBName")
				if [[ -z $all_rows ]]; then
				    zenity --info --text="No data in the table."
				else
				    zenity --info --text="All records:\n$all_rows"
				fi
			    fi
			fi
		    fi
		    ;;


		esac
	else
		zenity --question --title="Exit Confirmation" --text="Are you sure you want to back to the main menu?"
		user_answer=$?
		if [[ $user_answer == "0" ]]; then
			break
		else
			continue
		fi
	fi
done

